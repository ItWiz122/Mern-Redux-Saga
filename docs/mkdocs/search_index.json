{
    "docs": [
        {
            "location": "/", 
            "text": "Harmony Boilerplate is based on Multi Model Layer, MongoDB, Express, React and NodeJS\n\n\n\n\n\n\n\n\n\n\n\nQuick start\n\n\n\n\nInstall the last version of \nYeoman\n\n\n$ npm install yo -g\n\n\n\n\n\nInstall the last version of our smashing generator \ngenerator-harmony-boilerplate\n\n\n$ npm install generator-harmony-boilerplate -g\n\n\n\n\n\nGenerate and Start your project\n\n$ yo generator-harmony-boilerplate\n\n\n\n\n\nStart your project\n\n$ npm start\n\n\n\n\n\nNow you can go to\n \nlocalhost:8080\n \nand see your app!\n\n\n\n\n\n\n\nFeatures\n\n\n\n    \n\n        \n\n            \nflash_on\n\n            \nSpeeds up development\n\n            \nWe did most of the heavy lifting for you to provide a better experience with boilerplates \n\n        \n\n    \n\n    \n\n        \n\n            \ncode\n\n            \nBest Practice\n\n            \nPredefined scripts that let you deliver your app as fast as you can.\n\n        \n\n    \n\n    \n\n        \n\n            \nstorage\n\n            \nFlexible Databse\n\n            \nUsing multiple model layer for flexible access to databases such as MongoDB and MySQL\n\n        \n\n    \n\n\n\n\n\n\n\n\n\n    \n\n        \n\n            \ngroup\n\n            \nReal-Time Dispatching\n\n            \nAbility to dispatch actions on each client via Websockets.\n\n        \n\n    \n\n    \n\n        \n\n                \nsecurity\n\n                \nUser Authentication\n\n                \nReady-To-Use auth mechanism with high security.\n\n        \n\n    \n\n    \n\n        \n\n            \nlanguage\n\n            \nMultilingual Support\n\n            \nEasy to add and support multiple languages with \nreact-intl\n.\n\n        \n\n    \n\n\n\n\nTools", 
            "title": "Harmony"
        }, 
        {
            "location": "/getting-started/", 
            "text": "Introduction\n\n\n\n\nHow to read Harmony Documentation\n\n\nHarmony Documentation built by steps to make it easy for you to get started and\nunderstand the full framework.\n\nPlease following the \nNext\n button at the bottom of the page.\n\n\n\n\nHarmony is a boilerplate to start build web application easily with focus on React Redux and NodeJS.\nHarmony suggest new feathers and improve your flexible with to decide your favorite tools,\nfor example, you can easily change your database choice from mongoDB to SQL and vis versa.\n\n\nHarmony Boilerplate focus on performance and Best Practices to build the most updated web application\n\n\nKeep read the Documentation and discover the many possibilities we offer.\n\n\nInstallation\n\n\nGenerator\n\n\nGenerate your Project\n\n$ npm install yo -g\n\n$ npm install generator-harmony-boilerplate -g\n\n$ yo generator-harmony-boilerplate\n\n\n\n\n\nnpm\n\n\nRun for Development\n\n$ npm run start:dev\n\n\n\n\n\nRun for Production\n\n$ npm run start:prod\n\n\n\n\n\nDocker\n\n\nRun for Development\n\n$ docker-compose -f docker-compose-development.yml build\n\n$ docker-compose -f docker-compose-development.yml up\n\n\n\n\n\nRun for Production\n\n$ docker-compose build\n\n$ docker-compose up\n\n\n\n\n\n\n\nServer and Client Configuration\n\n\nYou can select your ports and url's for server, websocket and database via Config files.\n\n\nDefault ports:\n\n\nserver\n: 8080\n\n\nwebsocket\n: 3030\n\n\n\n\nHarmony Posts Example\n\n\n\n\nPosts Example Database\n\n\nPosts Example work only with mongoDB.\nIf you don't use docker, don't forget turn on your mongoDB.\n\n\n\n\nAfter Harmony installed you can watch the included Posts example.\nPosts Example introduce the most usage with Harmony feathers,\nincluding : websocket, translate and more ...\nRegister and login, now you can add remove and watch posts on the wall :).\n\n\nWhat next ?\n\n\nCongratulations, you start your first Harmony web app.\nNow go on and explore how to develop your next web app easily with our feathers.", 
            "title": "Getting started"
        }, 
        {
            "location": "/getting-started/#introduction", 
            "text": "How to read Harmony Documentation  Harmony Documentation built by steps to make it easy for you to get started and\nunderstand the full framework. \nPlease following the  Next  button at the bottom of the page.   Harmony is a boilerplate to start build web application easily with focus on React Redux and NodeJS.\nHarmony suggest new feathers and improve your flexible with to decide your favorite tools,\nfor example, you can easily change your database choice from mongoDB to SQL and vis versa.  Harmony Boilerplate focus on performance and Best Practices to build the most updated web application  Keep read the Documentation and discover the many possibilities we offer.", 
            "title": "Introduction"
        }, 
        {
            "location": "/getting-started/#installation", 
            "text": "", 
            "title": "Installation"
        }, 
        {
            "location": "/getting-started/#generator", 
            "text": "Generate your Project $ npm install yo -g\n\n$ npm install generator-harmony-boilerplate -g\n\n$ yo generator-harmony-boilerplate", 
            "title": "Generator"
        }, 
        {
            "location": "/getting-started/#npm", 
            "text": "Run for Development $ npm run start:dev   Run for Production $ npm run start:prod", 
            "title": "npm"
        }, 
        {
            "location": "/getting-started/#docker", 
            "text": "Run for Development $ docker-compose -f docker-compose-development.yml build\n\n$ docker-compose -f docker-compose-development.yml up   Run for Production $ docker-compose build\n\n$ docker-compose up    Server and Client Configuration  You can select your ports and url's for server, websocket and database via Config files. \nDefault ports:  server : 8080  websocket : 3030", 
            "title": "Docker"
        }, 
        {
            "location": "/getting-started/#harmony-posts-example", 
            "text": "Posts Example Database  Posts Example work only with mongoDB.\nIf you don't use docker, don't forget turn on your mongoDB.   After Harmony installed you can watch the included Posts example.\nPosts Example introduce the most usage with Harmony feathers,\nincluding : websocket, translate and more ...\nRegister and login, now you can add remove and watch posts on the wall :).", 
            "title": "Harmony Posts Example"
        }, 
        {
            "location": "/getting-started/#what-next", 
            "text": "Congratulations, you start your first Harmony web app.\nNow go on and explore how to develop your next web app easily with our feathers.", 
            "title": "What next ?"
        }, 
        {
            "location": "/develop-with-harmony/", 
            "text": "Flow Data\n\n\nThe following diagram display basic redux architecture with few Harmony Features.\nYou can get more information on every feather in API docs.", 
            "title": "Harmony Architecture"
        }, 
        {
            "location": "/develop-with-harmony/#flow-data", 
            "text": "The following diagram display basic redux architecture with few Harmony Features.\nYou can get more information on every feather in API docs.", 
            "title": "Flow Data"
        }, 
        {
            "location": "/extensions/server/server/", 
            "text": "Server\n\n\nBased Technologies\n\n\n\n\nExpress\n\n\nAPIDoc\n\n\nMongoose\n\n\nSequelize\n\n\n\n\nServer Folder Structure\n\n\n.\n\u251c\u2500\u2500 server    \n|     \u251c\u2500\u2500 docs\n|     \u251c\u2500\u2500 src       \n|           \u251c\u2500\u2500 api\n|               \u251c\u2500\u2500 authentication\n|               \u251c\u2500\u2500 global\n|                   \u251c\u2500\u2500 responses\n|               \u251c\u2500\u2500 posts\n|                   \u251c\u2500\u2500 model\n|                   \u251c\u2500\u2500 responses\n|                   \u251c\u2500\u2500 index.js\n|                   \u251c\u2500\u2500 posts.controller.js\n|           \u251c\u2500\u2500 middleware\n|               \u251c\u2500\u2500 authenticate.js\n|               \u251c\u2500\u2500 authenticate-sequelize.js\n|           \u251c\u2500\u2500 config.js\n|     \u251c\u2500\u2500 apidoc.json  \n|     \u251c\u2500\u2500 server.js", 
            "title": "Server Introduction"
        }, 
        {
            "location": "/extensions/server/server/#server", 
            "text": "", 
            "title": "Server"
        }, 
        {
            "location": "/extensions/server/server/#based-technologies", 
            "text": "Express  APIDoc  Mongoose  Sequelize", 
            "title": "Based Technologies"
        }, 
        {
            "location": "/extensions/server/server/#server-folder-structure", 
            "text": ".\n\u251c\u2500\u2500 server    \n|     \u251c\u2500\u2500 docs\n|     \u251c\u2500\u2500 src       \n|           \u251c\u2500\u2500 api\n|               \u251c\u2500\u2500 authentication\n|               \u251c\u2500\u2500 global\n|                   \u251c\u2500\u2500 responses\n|               \u251c\u2500\u2500 posts\n|                   \u251c\u2500\u2500 model\n|                   \u251c\u2500\u2500 responses\n|                   \u251c\u2500\u2500 index.js\n|                   \u251c\u2500\u2500 posts.controller.js\n|           \u251c\u2500\u2500 middleware\n|               \u251c\u2500\u2500 authenticate.js\n|               \u251c\u2500\u2500 authenticate-sequelize.js\n|           \u251c\u2500\u2500 config.js\n|     \u251c\u2500\u2500 apidoc.json  \n|     \u251c\u2500\u2500 server.js", 
            "title": "Server Folder Structure"
        }, 
        {
            "location": "/extensions/server/config/", 
            "text": "Config\n\n\nServer configuration located on \nserver/src/config.js\n\n\nconst\n \nconfig\n \n=\n \n{\n\n    \nsql\n \n:\n \n{\n\n        \ndb\n:\nseq\n,\n\n        \nuser\n:\nroot\n,\n\n        \npass\n:\n\n    \n},\n\n    \nmongo\n:\n \n{\n\n        \ndbUrl\n:\n  \nprocess\n.\nenv\n.\nMONGO_URL\n \n||\n \nmongodb://127.0.0.1:27017/db\n\n    \n},\n\n    \nuseMongo\n:\ntrue\n,\n\n    \nuseSql\n:\n \nfalse\n,\n\n    \nJWT_SECRET\n:\nYOUR_SMASHING_JWT_SECRET\n,\n\n    \nserver\n:\n{\n\n      \nport\n:\n \nprocess\n.\nenv\n.\nPORT\n \n||\n \n8080\n\n    \n},\n\n    \nwebsocket\n:\n{\n\n        \nport\n:\n \nprocess\n.\nenv\n.\nWS_PORT\n \n||\n \n3030\n\n    \n},\n\n\n    \nallowedActions\n:\n \n[\n\n        \nactions\n.\nFETCH_POSTS\n\n    \n]\n\n\n\n\n};\n\n\n\n\n\n\n\n\nYou can choose whether to use Relational DB or Non Relational such as MongoDB, change \nuseMongo\n  \nuseSql\n according to your decisions.\n\n\nJWT_SECRET\n used for Authorization Token generation.\n\n\nwebsocket\n contain your websocket server configuration, we are using it for broadcasting actions on client side. amazing no?\n\n\nallowedActions\n comes with the websocket, its contain what are the actions that the websocket is allowed to broadcast to the client.", 
            "title": "Configuration"
        }, 
        {
            "location": "/extensions/server/config/#config", 
            "text": "Server configuration located on  server/src/config.js  const   config   =   { \n     sql   :   { \n         db : seq , \n         user : root , \n         pass : \n     }, \n     mongo :   { \n         dbUrl :    process . env . MONGO_URL   ||   mongodb://127.0.0.1:27017/db \n     }, \n     useMongo : true , \n     useSql :   false , \n     JWT_SECRET : YOUR_SMASHING_JWT_SECRET , \n     server : { \n       port :   process . env . PORT   ||   8080 \n     }, \n     websocket : { \n         port :   process . env . WS_PORT   ||   3030 \n     }, \n\n     allowedActions :   [ \n         actions . FETCH_POSTS \n     ]  };    You can choose whether to use Relational DB or Non Relational such as MongoDB, change  useMongo    useSql  according to your decisions.  JWT_SECRET  used for Authorization Token generation.  websocket  contain your websocket server configuration, we are using it for broadcasting actions on client side. amazing no?  allowedActions  comes with the websocket, its contain what are the actions that the websocket is allowed to broadcast to the client.", 
            "title": "Config"
        }, 
        {
            "location": "/extensions/server/authentication/", 
            "text": "Authentication\n\n\nIntroduction\n\n\n\n\nAuthentication\n\n\nWe created a predefined authentication mechanism for your convenience.\n\n\n - POST    /users                   -\n  create \n\n - GET     /users/me                -\n  me      \n\n - DELETE  /users/me/logout         -\n  logout  \n\n - POST    /users/login             -\n  login   \n\n - POST    /users/broadcastAction   -\n  broadcastAction \n\n\n\n\n\n\nConfiguration\n\n\nwhen you are changing the config to work with MySQL, \nuseSql\n flag in Configuration\nyour authentication will work with your SQL db instance.\n@see \nserver/src/api/authentication/users-sequelize\n\n\n\n\nconst\n \n{\nRouter\n}\n \n=\n \nrequire\n(\nexpress\n);\n\n\n\nconst\n \ncontroller\n \n=\n \nrequire\n(\n./user.controller\n);\n\n\nconst\n \n{\nauthenticate\n}\n \n=\n \nrequire\n(\n./../../../middleware/authenticate\n);\n\n\n\nvar\n \nrouter\n \n=\n \nnew\n \nRouter\n();\n\n\n\n/**\n\n\n * @api {post} authentication/users/ Create User\n\n\n * @apiName CreateUserToken\n\n\n * @apiGroup User\n\n\n *\n\n\n * @apiParam {String} email .\n\n\n * @apiParam {String} password .\n\n\n *\n\n\n * @apiSuccess {Object} - set header x-auth with generated token.\n\n\n */\n\n\nrouter\n.\npost\n(\n/\n,\n \ncontroller\n.\ncreate\n);\n\n\n/**\n\n\n * @api {get} /authentication/users/me Get User\n\n\n * @apiName GetUser\n\n\n * @apiGroup User\n\n\n *\n\n\n * @apiSuccess {Object} - get current user.\n\n\n */\n\n\nrouter\n.\nget\n(\n/me\n,\n \nauthenticate\n,\n \ncontroller\n.\nme\n);\n\n\n/**\n\n\n * @api {delete} /authentication/users/me/token Logout\n\n\n * @apiName LogoutUser\n\n\n * @apiGroup User\n\n\n *\n\n\n * @apiSuccess {Object} - status 200.\n\n\n */\n\n\nrouter\n.\ndelete\n(\n/me/token\n,\n \nauthenticate\n,\n \ncontroller\n.\nlogout\n);\n\n\n/**\n\n\n * @api {post} /authentication/users/login Login\n\n\n * @apiName LoginUser\n\n\n * @apiGroup User\n\n\n\n * @apiParam {String} email .\n\n\n * @apiParam {String} password .\n\n\n\n * @apiSuccess {Object} - set header x-auth with generated token.\n\n\n */\n\n\nrouter\n.\npost\n(\n/login\n,\n \ncontroller\n.\nlogin\n);\n\n\n/**\n\n\n * @api {post} /authentication/users/broadcastAction Broadcast Action\n\n\n * @apiName BroadcastAction\n\n\n * @apiGroup User\n\n\n\n * @apiParam {Object} action with type and payload.\n\n\n\n * @apiSuccess {Object} - broadcast to thethe action to all.\n\n\n */\n\n\nrouter\n.\npost\n(\n/broadcastAction\n,\n \ncontroller\n.\nbroadcastAction\n);\n\n\n\n\n\nmodule\n.\nexports\n \n=\n \nrouter\n;\n\n\n\n\n\n\nAuthenticate Your API\n\n\n\n\nMiddleware\n\n\nYou can use our \nauthenticate\n middleware to your API by importing it from \nmiddleware\n folder.\n\n\nThe middleware contain a function that deal with the current \nModel\n according to your configuration ( Sequelize  Mongoose )\n\n\n\n\nconst\n \nUser\n \n=\n \nrequire\n(\n./../api/authentication/users-mongo/user-model\n);\n\n\n\nvar\n \nauthenticate\n \n=\n \n(\nreq\n,\n \nres\n,\n \nnext\n)\n \n=\n \n{\n\n    \nlet\n \ntoken\n \n=\n \nreq\n.\nheader\n(\nAuthorization\n);\n\n    \nUser\n.\nfindByToken\n(\ntoken\n).\nthen\n((\nuser\n)\n \n=\n \n{\n\n\n        \nif\n(\n!\nuser\n)\n \n{\n\n            \nreturn\n \nnew\n \nPromise\n((\nresolve\n,\n \nreject\n)\n \n=\n \n{\n\n                \nreject\n();\n\n            \n});\n\n        \n}\n\n\n        \nreq\n.\nuser\n \n=\n \nuser\n;\n\n        \nreq\n.\ntoken\n \n=\n \ntoken\n;\n\n        \nnext\n();\n\n\n    \n}).\ncatch\n((\ne\n)\n \n=\n \n{\n\n        \nconsole\n.\nlog\n(\ne\n);\n\n        \nres\n.\nstatus\n(\n401\n).\nsend\n();\n\n\n    \n});\n\n\n};\n\n\n\nmodule\n.\nexports\n \n=\n \n{\nauthenticate\n}\n\n\n\n\n\n\nUsage\n\n\nconst\n \n{\nRouter\n}\n \n=\n \nrequire\n(\nexpress\n);\n\n\nconst\n \n{\nauthenticate\n}\n \n=\n \nrequire\n(\n./../../middleware/authenticate\n);\n\n\n\nconst\n \ncontroller\n \n=\n \nrequire\n(\n./posts.controller\n);\n\n\n\nvar\n \nrouter\n \n=\n \nnew\n \nRouter\n();\n\n\n\n/**\n\n\n * @api {post} /posts Create Post\n\n\n * @apiName CreatePosts\n\n\n * @apiGroup Posts\n\n\n *\n\n\n * @apiParam {String} name .\n\n\n *\n\n\n * @apiSuccess {Object} - contain message and resource id.\n\n\n */\n\n\nrouter\n.\npost\n(\n/\n,\n \nauthenticate\n,\ncontroller\n.\ncreate\n);", 
            "title": "Authentication"
        }, 
        {
            "location": "/extensions/server/authentication/#authentication", 
            "text": "", 
            "title": "Authentication"
        }, 
        {
            "location": "/extensions/server/authentication/#introduction", 
            "text": "Authentication  We created a predefined authentication mechanism for your convenience. \n - POST    /users                   -   create  \n - GET     /users/me                -   me       \n - DELETE  /users/me/logout         -   logout   \n - POST    /users/login             -   login    \n - POST    /users/broadcastAction   -   broadcastAction     Configuration  when you are changing the config to work with MySQL,  useSql  flag in Configuration\nyour authentication will work with your SQL db instance.\n@see  server/src/api/authentication/users-sequelize   const   { Router }   =   require ( express );  const   controller   =   require ( ./user.controller );  const   { authenticate }   =   require ( ./../../../middleware/authenticate );  var   router   =   new   Router ();  /**   * @api {post} authentication/users/ Create User   * @apiName CreateUserToken   * @apiGroup User   *   * @apiParam {String} email .   * @apiParam {String} password .   *   * @apiSuccess {Object} - set header x-auth with generated token.   */  router . post ( / ,   controller . create );  /**   * @api {get} /authentication/users/me Get User   * @apiName GetUser   * @apiGroup User   *   * @apiSuccess {Object} - get current user.   */  router . get ( /me ,   authenticate ,   controller . me );  /**   * @api {delete} /authentication/users/me/token Logout   * @apiName LogoutUser   * @apiGroup User   *   * @apiSuccess {Object} - status 200.   */  router . delete ( /me/token ,   authenticate ,   controller . logout );  /**   * @api {post} /authentication/users/login Login   * @apiName LoginUser   * @apiGroup User   * @apiParam {String} email .   * @apiParam {String} password .   * @apiSuccess {Object} - set header x-auth with generated token.   */  router . post ( /login ,   controller . login );  /**   * @api {post} /authentication/users/broadcastAction Broadcast Action   * @apiName BroadcastAction   * @apiGroup User   * @apiParam {Object} action with type and payload.   * @apiSuccess {Object} - broadcast to thethe action to all.   */  router . post ( /broadcastAction ,   controller . broadcastAction );  module . exports   =   router ;", 
            "title": "Introduction"
        }, 
        {
            "location": "/extensions/server/authentication/#authenticate-your-api", 
            "text": "Middleware  You can use our  authenticate  middleware to your API by importing it from  middleware  folder.  The middleware contain a function that deal with the current  Model  according to your configuration ( Sequelize  Mongoose )   const   User   =   require ( ./../api/authentication/users-mongo/user-model );  var   authenticate   =   ( req ,   res ,   next )   =   { \n     let   token   =   req . header ( Authorization ); \n     User . findByToken ( token ). then (( user )   =   { \n\n         if ( ! user )   { \n             return   new   Promise (( resolve ,   reject )   =   { \n                 reject (); \n             }); \n         } \n\n         req . user   =   user ; \n         req . token   =   token ; \n         next (); \n\n     }). catch (( e )   =   { \n         console . log ( e ); \n         res . status ( 401 ). send (); \n\n     });  };  module . exports   =   { authenticate }", 
            "title": "Authenticate Your API"
        }, 
        {
            "location": "/extensions/server/authentication/#usage", 
            "text": "const   { Router }   =   require ( express );  const   { authenticate }   =   require ( ./../../middleware/authenticate );  const   controller   =   require ( ./posts.controller );  var   router   =   new   Router ();  /**   * @api {post} /posts Create Post   * @apiName CreatePosts   * @apiGroup Posts   *   * @apiParam {String} name .   *   * @apiSuccess {Object} - contain message and resource id.   */  router . post ( / ,   authenticate , controller . create );", 
            "title": "Usage"
        }, 
        {
            "location": "/extensions/server/websocket/", 
            "text": "Websocket\n\n\nWe created two methods inside the websocket server that you can use.\n\nconst\n \nwss\n \n=\n \nnew\n \nWebSocket\n.\nServer\n({\n \nport\n:\n \nconfig\n.\nwebsocket\n.\nport\n \n});\n\n\n\nwss\n.\nbroadcastAction\n \n=\n \nfunction\n(\nrequest\n){\n\n\n    \ntry\n \n{\n\n        \nvar\n \nresult\n \n=\n \n_\n.\nfind\n(\nconfig\n.\nallowedActions\n,\n \nfunction\n \n(\no\n)\n \n{\n\n            \nreturn\n \no\n \n===\n \nrequest\n.\naction\n.\ntype\n\n        \n});\n\n\n        \nif\n \n(\n!\nresult\n)\n \n{\n\n            \nreturn\n;\n\n        \n}\n\n        \nwss\n.\nbroadcast\n({\n\n            \nWS_ACTION\n:\n \ntrue\n,\n\n            \ntoken\n:\n \nrequest\n.\ntoken\n \n||\n \nnull\n,\n\n            \naction\n:\n \nrequest\n.\naction\n\n        \n});\n\n    \n}\n\n    \ncatch\n \n(\ne\n)\n \n{\n\n        \nconsole\n.\nlog\n(\ne\n);\n\n    \n}\n\n\n\n};\n\n\n\nwss\n.\nbroadcast\n \n=\n \nfunction\n \nbroadcast\n(\ndata\n)\n \n{\n\n\n  \nwss\n.\nclients\n.\nforEach\n(\nfunction\n \neach\n(\nclient\n)\n \n{\n\n\n    \nif\n \n(\nclient\n.\nreadyState\n \n===\n \nWebSocket\n.\nOPEN\n)\n \n{\n\n      \nclient\n.\nsend\n(\nJSON\n.\nstringify\n(\ndata\n));\n\n    \n}\n\n  \n});\n\n\n};\n\n\n\n\n\n\nWebsocket Actions\n\n\n\n\nSECURE WARNING\n - You must to declare your \nallowed actions\n in server config.\n\n\nIf the action is not allowed on the server, the action will not be executed !\n\n\n\n\n\n\nTo add allowed actions for broadcasting go to \nconfig\n and edit allowedActions \n\n allowedActions: [\n        actions.FETCH_POSTS,\n        ...\n    ]\n\n\n\nthere is reference in the configuration file to the client actions.\n\nconst actions = require(\n../../client/src/actions\n);\n\n\n\nharmony let the client to invoke actions on each client on the system by using the websocket instance on the server.\nfor example: lets say User A delete item from the database and want that all the users will FETCH the items again.\n\n\n\n\nby invoking the following API - \nPOST    /users/broadcastAction   -\n  broadcastAction\n\nwith the this payload : \n\n{type: ActionTypes.FETCH_POSTS, payload: null}\n\n\n\nthe websocket instance will broadcast to all users this action.\nIn addition, there is option to invoke the broadcasting service from each API.\n\n\nWebsocket\n\n\nYou can use the websocket service to pass messages between the clients or from server to clients by invoking:\n\nexports\n.\ncreate\n \n=\n \nfunction\n(\nreq\n,\n \nres\n)\n \n{\n\n    \nlet\n \nModelInstance\n \n=\n \nnew\n \nMODEL_SERVICE\n();\n\n    \n...\n\n    \nreq\n.\napp\n.\nget\n(\nwss\n).\nbroadcast\n(\nYOUR_MESSAGE\n);\n\n\n\n\n\n\n\n\nFor more information check how you deal with the websocket from the client side", 
            "title": "Websocket"
        }, 
        {
            "location": "/extensions/server/websocket/#websocket", 
            "text": "We created two methods inside the websocket server that you can use. const   wss   =   new   WebSocket . Server ({   port :   config . websocket . port   });  wss . broadcastAction   =   function ( request ){ \n\n     try   { \n         var   result   =   _ . find ( config . allowedActions ,   function   ( o )   { \n             return   o   ===   request . action . type \n         }); \n\n         if   ( ! result )   { \n             return ; \n         } \n         wss . broadcast ({ \n             WS_ACTION :   true , \n             token :   request . token   ||   null , \n             action :   request . action \n         }); \n     } \n     catch   ( e )   { \n         console . log ( e ); \n     }  };  wss . broadcast   =   function   broadcast ( data )   { \n\n   wss . clients . forEach ( function   each ( client )   { \n\n     if   ( client . readyState   ===   WebSocket . OPEN )   { \n       client . send ( JSON . stringify ( data )); \n     } \n   });  };", 
            "title": "Websocket"
        }, 
        {
            "location": "/extensions/server/websocket/#websocket-actions", 
            "text": "SECURE WARNING  - You must to declare your  allowed actions  in server config.  If the action is not allowed on the server, the action will not be executed !    To add allowed actions for broadcasting go to  config  and edit allowedActions   allowedActions: [\n        actions.FETCH_POSTS,\n        ...\n    ] \n\nthere is reference in the configuration file to the client actions. const actions = require( ../../client/src/actions ); \n\nharmony let the client to invoke actions on each client on the system by using the websocket instance on the server.\nfor example: lets say User A delete item from the database and want that all the users will FETCH the items again.   by invoking the following API -  POST    /users/broadcastAction   -   broadcastAction \nwith the this payload :  {type: ActionTypes.FETCH_POSTS, payload: null} \n\nthe websocket instance will broadcast to all users this action.\nIn addition, there is option to invoke the broadcasting service from each API.", 
            "title": "Websocket Actions"
        }, 
        {
            "location": "/extensions/server/websocket/#websocket_1", 
            "text": "You can use the websocket service to pass messages between the clients or from server to clients by invoking: exports . create   =   function ( req ,   res )   { \n     let   ModelInstance   =   new   MODEL_SERVICE (); \n     ... \n     req . app . get ( wss ). broadcast ( YOUR_MESSAGE );     For more information check how you deal with the websocket from the client side", 
            "title": "Websocket"
        }, 
        {
            "location": "/extensions/server/generate_new_api/", 
            "text": "Generate New API\n\n\nA proper API consist the following:\n\n\n\n\nModel ( Using Mongoose )\n\n\nController ( Holding the main functions like create, update, delete, get, etc..)\n\n\nResponses ( JS file that contain responses relate to the current API )\n\n\nroutes ( Mapping the routes to the Controller )\n\n\n\n\nCreating API\n\n\nInorder to create your API, We suggest to use our CLI script\n\n\ngulp createApi --name \nYOUR_API_NAME\n\n\nNote - \nIf you are going to use MySQL  SQL  PostgreSQL  MSSQL you should add this:\n\n--apiType sql\n \notherwise it will use mongodb\n\n\nIt will generate under \nserver/src/api\n folder with the files of your api :\n\n\nUsage\n\n\ngulp createApi --name post\n\n\nResult\n\n\n.\n\u251c\u2500\u2500 post         \n|     \u251c\u2500\u2500 post.controller.js                    \n|     \u251c\u2500\u2500 index.js   \n|     \u251c\u2500\u2500 model   \n|           \u251c\u2500\u2500 post.js \n|     \u251c\u2500\u2500 responses\n|           \u251c\u2500\u2500 index.js\n\n\n\n\n\nTemplating\n\n\nIf you want to create your own templates you will need to add the template file under \ngenerator/templates/server\n\nand under \ncreateApi\n task in the \ngulpfile.js\n on the root folder do the following :\n\n\ngulp\n.\ntask\n(\ncreateApi\n,\n \n()\n \n=\n \n{\n\n    \nlet\n \napiName\n \n=\n \ngetArg\n(\nname\n);\n\n    \nif\n(\n!\nvalidateName\n(\napiName\n,\n \n--name\n,\n \nfalse\n))\n \nreturn\n;\n\n    \nvar\n \nUPPERCASE_MODEL_NAME\n \n=\n \napiName\n.\ntoString\n().\ntoUpperCase\n();\n\n    \nvar\n \nCapitalLetterModelName\n \n=\n \ncapitalize\n(\napiName\n);\n\n    \ncreateTemplate\n(\n\n        \n./generator/templates/server/api-controller-template\n,\n\n        \nserver/src/api/\n+\napiName\n+\n/\n+\napiName\n+\n.controller.js\n,\n\n        \n{\n\n         \nname\n:\n \napiName\n,\n\n         \nupperCaseModelName\n \n:\n \nUPPERCASE_MODEL_NAME\n,\n\n         \ncapitalLetterModelName\n:\n \nCapitalLetterModelName\n\n        \n}\n\n    \n);\n\n\n    \ncreateTemplate\n(\n\n        \n./generator/templates/server/model-template\n,\n\n        \nserver/src/api/\n+\napiName\n+\n/model/\n+\napiName\n+\n.js\n,\n\n        \n{\n\n            \ncapitalLetterModelName\n:\n \nCapitalLetterModelName\n\n        \n}\n\n    \n);\n\n\n    \ncreateTemplate\n(\n\n        \n./generator/templates/server/responses-template\n,\n\n        \nserver/src/api/\n+\napiName\n+\n/responses/index.js\n,\n\n        \n{\n\n         \ncapitalLetterModelName\n:\n \nCapitalLetterModelName\n,\n\n         \nupperCaseModelName\n \n:\n \nUPPERCASE_MODEL_NAME\n\n        \n}\n\n    \n);\n\n\n    \ncreateTemplate\n(\n\n        \n./generator/templates/server/index-template\n,\n\n        \nserver/src/api/\n+\napiName\n+\n/index.js\n,\n\n        \n{\n\n         \nname\n:\n \napiName\n,\n\n         \ncapitalLetterModelName\n:\n \nCapitalLetterModelName\n\n        \n}\n\n    \n);\n\n\n    \n/***** YOUR ADDITIONS *****/\n\n    \ncreateTemplate\n(\n\n        \n./generator/templates/server/YOUR_TEMPLATE_FILE_NAME\n,\n\n        \nserver/src/api/\n+\napiName\n+\n/DESTINATION_FILE_NAME\n,\n\n        \n{\n\n         \nname\n:\n \napiName\n,\n\n         \ncapitalLetterModelName\n:\n \nCapitalLetterModelName\n\n        \n}\n\n    \n);\n\n\n    \nreplaceText\n(\n\n        \n./server/src/routes/index.js\n,\n\n        \n./server/src/routes/\n,\n\n        \n// LASTLINE\n,\n\n        \napp.use(\n/\n+\napiName\n+\n, require(\n../api/\n+\napiName\n+\n));\\r\\n// LASTLINE\n\n    \n);\n\n\n\n});", 
            "title": "Generate New API"
        }, 
        {
            "location": "/extensions/server/generate_new_api/#generate-new-api", 
            "text": "A proper API consist the following:   Model ( Using Mongoose )  Controller ( Holding the main functions like create, update, delete, get, etc..)  Responses ( JS file that contain responses relate to the current API )  routes ( Mapping the routes to the Controller )", 
            "title": "Generate New API"
        }, 
        {
            "location": "/extensions/server/generate_new_api/#creating-api", 
            "text": "Inorder to create your API, We suggest to use our CLI script  gulp createApi --name  YOUR_API_NAME  Note - \nIf you are going to use MySQL  SQL  PostgreSQL  MSSQL you should add this: --apiType sql  \notherwise it will use mongodb  It will generate under  server/src/api  folder with the files of your api :", 
            "title": "Creating API"
        }, 
        {
            "location": "/extensions/server/generate_new_api/#usage", 
            "text": "gulp createApi --name post", 
            "title": "Usage"
        }, 
        {
            "location": "/extensions/server/generate_new_api/#result", 
            "text": ".\n\u251c\u2500\u2500 post         \n|     \u251c\u2500\u2500 post.controller.js                    \n|     \u251c\u2500\u2500 index.js   \n|     \u251c\u2500\u2500 model   \n|           \u251c\u2500\u2500 post.js \n|     \u251c\u2500\u2500 responses\n|           \u251c\u2500\u2500 index.js", 
            "title": "Result"
        }, 
        {
            "location": "/extensions/server/generate_new_api/#templating", 
            "text": "If you want to create your own templates you will need to add the template file under  generator/templates/server \nand under  createApi  task in the  gulpfile.js  on the root folder do the following :  gulp . task ( createApi ,   ()   =   { \n     let   apiName   =   getArg ( name ); \n     if ( ! validateName ( apiName ,   --name ,   false ))   return ; \n     var   UPPERCASE_MODEL_NAME   =   apiName . toString (). toUpperCase (); \n     var   CapitalLetterModelName   =   capitalize ( apiName ); \n     createTemplate ( \n         ./generator/templates/server/api-controller-template , \n         server/src/api/ + apiName + / + apiName + .controller.js , \n         { \n          name :   apiName , \n          upperCaseModelName   :   UPPERCASE_MODEL_NAME , \n          capitalLetterModelName :   CapitalLetterModelName \n         } \n     ); \n\n     createTemplate ( \n         ./generator/templates/server/model-template , \n         server/src/api/ + apiName + /model/ + apiName + .js , \n         { \n             capitalLetterModelName :   CapitalLetterModelName \n         } \n     ); \n\n     createTemplate ( \n         ./generator/templates/server/responses-template , \n         server/src/api/ + apiName + /responses/index.js , \n         { \n          capitalLetterModelName :   CapitalLetterModelName , \n          upperCaseModelName   :   UPPERCASE_MODEL_NAME \n         } \n     ); \n\n     createTemplate ( \n         ./generator/templates/server/index-template , \n         server/src/api/ + apiName + /index.js , \n         { \n          name :   apiName , \n          capitalLetterModelName :   CapitalLetterModelName \n         } \n     ); \n\n     /***** YOUR ADDITIONS *****/ \n     createTemplate ( \n         ./generator/templates/server/YOUR_TEMPLATE_FILE_NAME , \n         server/src/api/ + apiName + /DESTINATION_FILE_NAME , \n         { \n          name :   apiName , \n          capitalLetterModelName :   CapitalLetterModelName \n         } \n     ); \n\n     replaceText ( \n         ./server/src/routes/index.js , \n         ./server/src/routes/ , \n         // LASTLINE , \n         app.use( / + apiName + , require( ../api/ + apiName + ));\\r\\n// LASTLINE \n     );  });", 
            "title": "Templating"
        }, 
        {
            "location": "/extensions/client/client/", 
            "text": "Client\n\n\nClient Folder include all the code for the client side.\nFor Client we using \nreeact\n and \nredux\n architecture. \n\n\nBased Technologies\n\n\nReact\n\n\n\n\nreact\n\n\nreact-router\n\n\n\n\nRedux\n\n\n\n\nredux\n\n\nredux-saga\n\n\nredux-promise\n\n\nredux-form\n\n\nredux-form-field\n\n\n\n\nWebsocket\n\n\n\n\nreact-websocket\n\n\nws-reconnect-js\n\n\n\n\nUtils\n\n\n\n\nimmutableJS\n\n\naxios\n\n\n\n\nClient Folder Structure\n\n\n.\n\u251c\u2500\u2500 client    \n|     \u251c\u2500\u2500 dist\n|     \u251c\u2500\u2500 src       \n|           \u251c\u2500\u2500 actions\n|           \u251c\u2500\u2500 base\n|               \u251c\u2500\u2500 api\n|               \u251c\u2500\u2500 features\n|               \u251c\u2500\u2500 utils\n|           \u251c\u2500\u2500 components\n|           \u251c\u2500\u2500 containers\n|           \u251c\u2500\u2500 reducers\n|           \u251c\u2500\u2500 requests\n|           \u251c\u2500\u2500 sagas\n|           \u251c\u2500\u2500 config.js\n|           \u251c\u2500\u2500 index.js\n|           \u251c\u2500\u2500 routes.js\n|     \u251c\u2500\u2500 style  \n|     \u251c\u2500\u2500 test   \n|     \u251c\u2500\u2500 index.js", 
            "title": "Client Introduction"
        }, 
        {
            "location": "/extensions/client/client/#client", 
            "text": "Client Folder include all the code for the client side.\nFor Client we using  reeact  and  redux  architecture.", 
            "title": "Client"
        }, 
        {
            "location": "/extensions/client/client/#based-technologies", 
            "text": "", 
            "title": "Based Technologies"
        }, 
        {
            "location": "/extensions/client/client/#react", 
            "text": "react  react-router", 
            "title": "React"
        }, 
        {
            "location": "/extensions/client/client/#redux", 
            "text": "redux  redux-saga  redux-promise  redux-form  redux-form-field", 
            "title": "Redux"
        }, 
        {
            "location": "/extensions/client/client/#websocket", 
            "text": "react-websocket  ws-reconnect-js", 
            "title": "Websocket"
        }, 
        {
            "location": "/extensions/client/client/#utils", 
            "text": "immutableJS  axios", 
            "title": "Utils"
        }, 
        {
            "location": "/extensions/client/client/#client-folder-structure", 
            "text": ".\n\u251c\u2500\u2500 client    \n|     \u251c\u2500\u2500 dist\n|     \u251c\u2500\u2500 src       \n|           \u251c\u2500\u2500 actions\n|           \u251c\u2500\u2500 base\n|               \u251c\u2500\u2500 api\n|               \u251c\u2500\u2500 features\n|               \u251c\u2500\u2500 utils\n|           \u251c\u2500\u2500 components\n|           \u251c\u2500\u2500 containers\n|           \u251c\u2500\u2500 reducers\n|           \u251c\u2500\u2500 requests\n|           \u251c\u2500\u2500 sagas\n|           \u251c\u2500\u2500 config.js\n|           \u251c\u2500\u2500 index.js\n|           \u251c\u2500\u2500 routes.js\n|     \u251c\u2500\u2500 style  \n|     \u251c\u2500\u2500 test   \n|     \u251c\u2500\u2500 index.js", 
            "title": "Client Folder Structure"
        }, 
        {
            "location": "/extensions/client/config/", 
            "text": "Config\n\n\nClient configuration located on \nclient/src/config.js\n\n\nfunction\n \ninitConfig\n()\n \n{\n\n\n    \nlet\n \nconfig\n \n=\n \n{\n \n};\n\n\n    \nif\n \n(\nprocess\n.\nenv\n.\nNODE_ENV\n \n===\n \ndevelopment\n)\n \n{\n\n\n        \n/* ---------- Config Development --------- */\n\n        \nconfig\n \n=\n \n{\n\n            \nROOT_SERVRE_URL\n:\n \nhttp://localhost:8080/api\n,\n\n            \nROOT_WS_URL\n:\n \nws://localhost:3030\n\n        \n};\n\n\n    \n}\n\n\n    \nelse\n \nif\n \n(\nprocess\n.\nenv\n.\nNODE_ENV\n \n===\n \nproduction\n)\n \n{\n\n\n        \n/* ---------- Config Production --------- */\n\n        \nconfig\n \n=\n \n{\n\n            \nROOT_SERVRE_URL\n:\n \nhttp://localhost:8080/api\n,\n\n            \nROOT_WS_URL\n:\n \nws://localhost:3030\n\n        \n};\n\n\n    \n}\n\n\n    \nreturn\n \nconfig\n;\n\n\n\n}\n\n\n\nexport\n \nconst\n \nconfig\n \n=\n \ninitConfig\n();\n\n\n\n\n\n\nDefine your root server url and root websocket url.\nThese variables are used in app.", 
            "title": "Configuration"
        }, 
        {
            "location": "/extensions/client/config/#config", 
            "text": "Client configuration located on  client/src/config.js  function   initConfig ()   { \n\n     let   config   =   {   }; \n\n     if   ( process . env . NODE_ENV   ===   development )   { \n\n         /* ---------- Config Development --------- */ \n         config   =   { \n             ROOT_SERVRE_URL :   http://localhost:8080/api , \n             ROOT_WS_URL :   ws://localhost:3030 \n         }; \n\n     } \n\n     else   if   ( process . env . NODE_ENV   ===   production )   { \n\n         /* ---------- Config Production --------- */ \n         config   =   { \n             ROOT_SERVRE_URL :   http://localhost:8080/api , \n             ROOT_WS_URL :   ws://localhost:3030 \n         }; \n\n     } \n\n     return   config ;  }  export   const   config   =   initConfig ();   Define your root server url and root websocket url.\nThese variables are used in app.", 
            "title": "Config"
        }, 
        {
            "location": "/extensions/client/websocket/", 
            "text": "Websocket Actions", 
            "title": "Websocket"
        }, 
        {
            "location": "/extensions/client/websocket/#websocket-actions", 
            "text": "", 
            "title": "Websocket Actions"
        }, 
        {
            "location": "/base/", 
            "text": "Base", 
            "title": "Base Folder"
        }, 
        {
            "location": "/base/#base", 
            "text": "", 
            "title": "Base"
        }, 
        {
            "location": "/extensions/client/generate_new_component/", 
            "text": "Generate New Component", 
            "title": "Generate Component"
        }, 
        {
            "location": "/extensions/client/generate_new_component/#generate-new-component", 
            "text": "", 
            "title": "Generate New Component"
        }, 
        {
            "location": "/extensions/client/generate_new_container/", 
            "text": "Generate New Container", 
            "title": "Generate Container"
        }, 
        {
            "location": "/extensions/client/generate_new_container/#generate-new-container", 
            "text": "", 
            "title": "Generate New Container"
        }, 
        {
            "location": "/release-notes/", 
            "text": "Release notes\n\n\nUpgrading\n\n\nTo upgrade harmony-boilerplate to the latest version, use npm:\n\n\nnpm update generator-harmony-boilerplate -g", 
            "title": "Release notes"
        }, 
        {
            "location": "/release-notes/#release-notes", 
            "text": "", 
            "title": "Release notes"
        }, 
        {
            "location": "/release-notes/#upgrading", 
            "text": "To upgrade harmony-boilerplate to the latest version, use npm:  npm update generator-harmony-boilerplate -g", 
            "title": "Upgrading"
        }, 
        {
            "location": "/contributing/", 
            "text": "Contributing\n\n\nInterested in contributing to the harmony boilerplate? Want to report a bug? Before\nyou do, please read the following guidelines.\n\n\nSubmission context\n\n\nFound a bug?\n\n\nIf you found a bug in the source code, you can help us by submitting an issue\nto the \nissue tracker\n in our GitHub repository. Even better, you can submit\na Pull Request with a fix. However, before doing so, please read the\n\nsubmission guidelines\n.\n\n\nMissing a feature?\n\n\nYou can request a new feature by submitting an issue to our GitHub Repository.\nIf you would like to implement a new feature, please submit an issue with a\nproposal for your work first, to be sure that it is of use for everyone, as\nthe Material theme is highly opinionated. Please consider what kind of change\nit is:\n\n\n\n\n\n\nFor a \nmajor feature\n, first open an issue and outline your proposal so\n  that it can be discussed. This will also allow us to better coordinate our\n  efforts, prevent duplication of work, and help you to craft the change so\n  that it is successfully accepted into the project.\n\n\n\n\n\n\nSmall features and bugs\n can be crafted and directly submitted as a Pull\n  Request. However, there is no guarantee that your feature will make it into\n  the master, as it's always a matter of opinion whether if benefits the\n  overall functionality of the theme.\n\n\n\n\n\n\nSubmission guidelines\n\n\nSubmitting an issue\n\n\nBefore you submit an issue, please search the issue tracker, maybe an issue for\nyour problem already exists and the discussion might inform you of workarounds\nreadily available.\n\n\nWe want to fix all the issues as soon as possible, but before fixing a bug we\nneed to reproduce and confirm it. In order to reproduce bugs we will\nsystematically ask you to provide a minimal reproduction scenario using the\ncustom issue template. Please stick to the issue template.\n\n\nUnfortunately we are not able to investigate / fix bugs without a minimal\nreproduction scenario, so if we don't hear back from you we may close the issue.\n\n\nSubmitting a Pull Request (PR)\n\n\nSearch GitHub for an open or closed PR that relates to your submission. You\ndon't want to duplicate effort. If you do not find a related issue or PR,\ngo ahead.\n\n\n\n\n\n\nDevelopment\n: Fork the project, set up development environment,\n  make your changes in a separate git branch and add descriptive messages to\n  your commits.\n\n\n\n\n\n\nBuild\n: Before submitting a pull requests, build the boilerplate ( dev and prod ). This is a\n  mandatory requirement for your PR to get accepted, as the boilerplate should at\n  all times be installable through GitHub.\n\n\n\n\n\n\nPull Request\n: After building the boilerplate, commit the changes, push\n  your branch to GitHub and send a PR to \nharmony-boilerplate:master\n. If we\n  suggest changes, make the required updates, rebase your branch and push the\n  changes to your GitHub repository, which will automatically update your PR.\n\n\n\n\n\n\nAfter your PR is merged, you can safely delete your branch and pull the changes\nfrom the main (upstream) repository.", 
            "title": "Contributing"
        }, 
        {
            "location": "/contributing/#contributing", 
            "text": "Interested in contributing to the harmony boilerplate? Want to report a bug? Before\nyou do, please read the following guidelines.", 
            "title": "Contributing"
        }, 
        {
            "location": "/contributing/#submission-context", 
            "text": "", 
            "title": "Submission context"
        }, 
        {
            "location": "/contributing/#found-a-bug", 
            "text": "If you found a bug in the source code, you can help us by submitting an issue\nto the  issue tracker  in our GitHub repository. Even better, you can submit\na Pull Request with a fix. However, before doing so, please read the submission guidelines .", 
            "title": "Found a bug?"
        }, 
        {
            "location": "/contributing/#missing-a-feature", 
            "text": "You can request a new feature by submitting an issue to our GitHub Repository.\nIf you would like to implement a new feature, please submit an issue with a\nproposal for your work first, to be sure that it is of use for everyone, as\nthe Material theme is highly opinionated. Please consider what kind of change\nit is:    For a  major feature , first open an issue and outline your proposal so\n  that it can be discussed. This will also allow us to better coordinate our\n  efforts, prevent duplication of work, and help you to craft the change so\n  that it is successfully accepted into the project.    Small features and bugs  can be crafted and directly submitted as a Pull\n  Request. However, there is no guarantee that your feature will make it into\n  the master, as it's always a matter of opinion whether if benefits the\n  overall functionality of the theme.", 
            "title": "Missing a feature?"
        }, 
        {
            "location": "/contributing/#submission-guidelines", 
            "text": "", 
            "title": "Submission guidelines"
        }, 
        {
            "location": "/contributing/#submitting-an-issue", 
            "text": "Before you submit an issue, please search the issue tracker, maybe an issue for\nyour problem already exists and the discussion might inform you of workarounds\nreadily available.  We want to fix all the issues as soon as possible, but before fixing a bug we\nneed to reproduce and confirm it. In order to reproduce bugs we will\nsystematically ask you to provide a minimal reproduction scenario using the\ncustom issue template. Please stick to the issue template.  Unfortunately we are not able to investigate / fix bugs without a minimal\nreproduction scenario, so if we don't hear back from you we may close the issue.", 
            "title": "Submitting an issue"
        }, 
        {
            "location": "/contributing/#submitting-a-pull-request-pr", 
            "text": "Search GitHub for an open or closed PR that relates to your submission. You\ndon't want to duplicate effort. If you do not find a related issue or PR,\ngo ahead.    Development : Fork the project, set up development environment,\n  make your changes in a separate git branch and add descriptive messages to\n  your commits.    Build : Before submitting a pull requests, build the boilerplate ( dev and prod ). This is a\n  mandatory requirement for your PR to get accepted, as the boilerplate should at\n  all times be installable through GitHub.    Pull Request : After building the boilerplate, commit the changes, push\n  your branch to GitHub and send a PR to  harmony-boilerplate:master . If we\n  suggest changes, make the required updates, rebase your branch and push the\n  changes to your GitHub repository, which will automatically update your PR.    After your PR is merged, you can safely delete your branch and pull the changes\nfrom the main (upstream) repository.", 
            "title": "Submitting a Pull Request (PR)"
        }, 
        {
            "location": "/license/", 
            "text": "License\n\n\nMIT License\n\n\nCopyright \n 2017 - 2018 Harmony Framework\n\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to\ndeal in the Software without restriction, including without limitation the\nrights to use, copy, modify, merge, publish, distribute, sublicense, and/or\nsell copies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\nFROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\nIN THE SOFTWARE.\n\n\n\n\nNote - the copy right thing is only if there is copy right comment block in the code, there is no need to mention us or give any attribution.", 
            "title": "License"
        }, 
        {
            "location": "/license/#license", 
            "text": "MIT License  Copyright   2017 - 2018 Harmony Framework  Permission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to\ndeal in the Software without restriction, including without limitation the\nrights to use, copy, modify, merge, publish, distribute, sublicense, and/or\nsell copies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:  The above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\nFROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\nIN THE SOFTWARE.   Note - the copy right thing is only if there is copy right comment block in the code, there is no need to mention us or give any attribution.", 
            "title": "License"
        }, 
        {
            "location": "/team/", 
            "text": "Harmony Team\n\n\n\n    \n\n        \n\n            \n\n            \nOfir Attia\n\n        \n\n    \n\n    \n\n        \n\n            \n\n            \nRefael Oknin", 
            "title": "Harmony Team"
        }, 
        {
            "location": "/team/#harmony-team", 
            "text": "", 
            "title": "Harmony Team"
        }
    ]
}